{"/home/travis/build/npmtest/node-npmtest-chromecasts/test.js":"/* istanbul instrument in package npmtest_chromecasts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chromecasts/lib.npmtest_chromecasts.js":"/* istanbul instrument in package npmtest_chromecasts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chromecasts = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chromecasts = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chromecasts/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chromecasts && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chromecasts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chromecasts\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chromecasts.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chromecasts.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chromecasts.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chromecasts.__dirname + '/lib.npmtest_chromecasts.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chromecasts/node_modules/chromecasts/index.js":"var castv2 = require('castv2-client')\nvar debug = require('debug')('chromecasts')\nvar events = require('events')\nvar get = require('simple-get')\nvar mdns = require('multicast-dns')\nvar mime = require('mime')\nvar parseString = require('xml2js').parseString\n\nvar SSDP\ntry {\n  SSDP = require('node-ssdp').Client\n} catch (err) {\n  SSDP = null\n}\n\nvar thunky = require('thunky')\nvar url = require('url')\n\nvar noop = function () {}\nvar toMap = function (url) {\n  return typeof url === 'string' ? {url: url} : url\n}\nvar toSubtitles = function (url, i) {\n  if (typeof url !== 'string') return url\n  return {\n    trackId: i + 1,\n    type: 'TEXT',\n    trackContentId: url,\n    trackContentType: 'text/vtt',\n    name: 'English',\n    language: 'en-US',\n    subtype: 'SUBTITLES'\n  }\n}\n\nmodule.exports = function () {\n  var dns = mdns()\n  var that = new events.EventEmitter()\n  var casts = {}\n  var ssdp = SSDP ? new SSDP({logLevel: process.env.DEBUG ? 'trace' : false}) : null\n\n  that.players = []\n\n  var emit = function (cst) {\n    if (!cst || !cst.host || cst.emitted) return\n    cst.emitted = true\n\n    var player = new events.EventEmitter()\n\n    var connect = thunky(function reconnect (cb) {\n      var client = new castv2.Client()\n\n      client.on('error', function (err) {\n        player.emit('error', err)\n      })\n\n      client.on('close', function () {\n        connect = thunky(reconnect)\n      })\n\n      client.client.on('close', function () {\n        connect = thunky(reconnect)\n      })\n\n      client.connect(player.host, function (err) {\n        if (err) return cb(err)\n        player.emit('connect')\n\n        client.getSessions(function (err, sess) {\n          if (err) return cb(err)\n\n          var session = sess[0]\n          if (session && session.appId === castv2.DefaultMediaReceiver.APP_ID) {\n            client.join(session, castv2.DefaultMediaReceiver, ready)\n          } else {\n            client.launch(castv2.DefaultMediaReceiver, ready)\n          }\n        })\n\n        function ready (err, p) {\n          if (err) return cb(err)\n\n          player.emit('ready')\n\n          p.on('close', function () {\n            connect = thunky(reconnect)\n          })\n\n          p.on('status', function (status) {\n            player.emit('status', status)\n          })\n\n          cb(null, p)\n        }\n      })\n    })\n\n    var connectClient = thunky(function reconnectClient (cb) {\n      var client = new castv2.Client()\n\n      client.on('error', function () {\n        connectClient = thunky(reconnectClient)\n      })\n\n      client.on('close', function () {\n        connectClient = thunky(reconnectClient)\n      })\n\n      client.connect(player.host, function (err) {\n        if (err) return cb(err)\n        cb(null, client)\n      })\n    })\n\n    player.name = cst.name\n    player.host = cst.host\n\n    player.client = function (cb) {\n      connectClient(cb)\n    }\n\n    player.chromecastStatus = function (cb) {\n      connectClient(function (err, client) {\n        if (err) return cb(err)\n        client.getStatus(cb)\n      })\n    }\n\n    player.play = function (url, opts, cb) {\n      if (typeof opts === 'function') return player.play(url, null, opts)\n      if (!opts) opts = {}\n      if (!url) return player.resume(cb)\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n\n        var media = {\n          contentId: url,\n          contentType: opts.type || mime.lookup(url, 'video/mp4'),\n          streamType: opts.streamType || 'BUFFERED',\n          tracks: [].concat(opts.subtitles || []).map(toSubtitles),\n          textTrackStyle: opts.textTrackStyle,\n          metadata: opts.metadata || {\n            type: 0,\n            metadataType: 0,\n            title: opts.title || '',\n            images: [].concat(opts.images || []).map(toMap)\n          }\n        }\n\n        var autoSubtitles = opts.autoSubtitles\n        if (autoSubtitles === false) autoSubtitles = 0\n        if (autoSubtitles === true) autoSubtitles = 1\n\n        var playerOptions = {\n          autoplay: opts.autoPlay !== false,\n          currentTime: opts.seek,\n          activeTrackIds: opts.subtitles && (autoSubtitles === 0 ? [] : [autoSubtitles || 1])\n        }\n\n        p.load(media, playerOptions, cb)\n      })\n    }\n\n    player.resume = function (cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n        p.play()\n      })\n    }\n\n    player.pause = function (cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n        p.pause(cb)\n      })\n    }\n\n    player.stop = function (cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n        p.stop(cb)\n      })\n    }\n\n    player.status = function (cb) {\n      connect(function (err, p) {\n        if (err) return cb(err)\n        p.getStatus(cb)\n      })\n    }\n\n    player.subtitles = function (id, cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n\n        player.request({\n          type: 'EDIT_TRACKS_INFO',\n          activeTrackIds: id ? [id === true ? 1 : id] : []\n        }, cb)\n      })\n    }\n\n    player.volume = function (vol, cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n\n        player.request({\n          type: 'SET_VOLUME',\n          volume: vol === 0 ? { muted: true } : { level: vol, muted: false }\n        }, cb)\n      })\n    }\n\n    player.request = function (data, cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n        p.media.sessionRequest(data, cb)\n      })\n    }\n\n    player.seek = function (time, cb) {\n      if (!cb) cb = noop\n      connect(function (err, p) {\n        if (err) return cb(err)\n        p.seek(time, cb)\n      })\n    }\n\n    that.players.push(player)\n    that.emit('update', player)\n  }\n\n  dns.on('response', function (response) {\n    response.answers.forEach(function (a) {\n      if (a.type === 'PTR' && a.name === '_googlecast._tcp.local') {\n        var name = a.data.replace('._googlecast._tcp.local', '')\n        if (!casts[name]) casts[name] = {name: name, host: null}\n      }\n    })\n\n    var onanswer = function (a) {\n      debug('got answer %j', a)\n\n      var name = a.name.replace('.local', '')\n      if (a.type === 'A' && casts[name] && !casts[name].host) {\n        casts[name].host = a.data\n        emit(casts[name])\n      }\n    }\n\n    response.additionals.forEach(onanswer)\n    response.answers.forEach(onanswer)\n  })\n\n  if (ssdp) {\n    ssdp.on('response', function (headers, statusCode, info) {\n      if (!headers.LOCATION) return\n\n      get.concat(headers.LOCATION, function (err, res, body) {\n        if (err) return\n        parseString(body.toString(), {explicitArray: false, explicitRoot: false},\n          function (err, service) {\n            if (err) return\n            if (!service.device) return\n            if (service.device.manufacturer !== 'Google Inc.') return\n\n            debug('device %j', service.device)\n\n            var name = service.device.friendlyName\n\n            if (!name) return\n\n            var host = url.parse(service.URLBase).hostname\n\n            if (!casts[name]) {\n              casts[name] = {name: name, host: host}\n              return emit(casts[name])\n            }\n\n            if (casts[name] && !casts[name].host) {\n              casts[name].host = host\n              emit(casts[name])\n            }\n          })\n      })\n    })\n  }\n\n  that.update = function () {\n    debug('querying mdns and ssdp')\n    if (ssdp) ssdp.search('urn:dial-multiscreen-org:device:dial:1')\n    dns.query('_googlecast._tcp.local', 'PTR')\n  }\n\n  that.destroy = function () {\n    dns.destroy()\n  }\n\n  that.update()\n\n  return that\n}\n"}